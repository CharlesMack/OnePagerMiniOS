<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neutral Buoyancy - The Bubble Paradox</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            font-family: 'Courier New', monospace;
            color: #fff;
        }
        .game-ui {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 100;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #333;
            min-width: 280px;
        }
        .slider-container {
            margin: 10px 0;
        }
        .slider-label {
            display: block;
            margin-bottom: 5px;
            font-size: 12px;
            color: #aaa;
        }
        .slider {
            width: 100%;
            margin: 5px 0;
        }
        .mode-button {
            background: #0066cc;
            color: white;
            border: none;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
        }
        .mode-button:hover {
            background: #0088ff;
        }
        .mode-button.active {
            background: #00aa00;
        }
        .title {
            font-size: 16px;
            margin-bottom: 15px;
            color: #fff;
            text-align: center;
        }
        .subtitle {
            font-size: 10px;
            color: #888;
            text-align: center;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="game-ui">
        <div class="title">NEUTRAL BUOYANCY</div>
        <div class="subtitle">The Bubble Paradox Investigation</div>
        
        <div class="slider-container">
            <label class="slider-label">Video Quality</label>
            <input type="range" min="0" max="100" value="20" class="slider" id="quality">
        </div>
        
        <div class="slider-container">
            <label class="slider-label">Contrast</label>
            <input type="range" min="0" max="200" value="50" class="slider" id="contrast">
        </div>
        
        <div class="slider-container">
            <label class="slider-label">Sharpness</label>
            <input type="range" min="0" max="100" value="20" class="slider" id="sharpness">
        </div>
        
        <div class="slider-container">
            <label class="slider-label">Bubble Physics</label>
            <input type="range" min="0" max="100" value="50" class="slider" id="physics">
        </div>
        
        <button class="mode-button active" onclick="setMode('conspiracy')">Conspiracy Mode</button>
        <button class="mode-button" onclick="setMode('reality')">Reality Check</button>
    </div>

    <script>
        let astronaut;
        let bubbles = [];
        let particles = [];
        let stars = [];
        let mode = 'conspiracy';
        
        // UI Controls
        let qualitySlider, contrastSlider, sharpnessSlider, physicsSlider;
        
        // Game state
        let videoQuality = 20;
        let contrast = 50;
        let sharpness = 20;
        let physics = 50;
        
        // Colors and effects
        let spaceColor, underwaterColor;
        let noiseLevel = 0.8;
        
        function setup() {
            createCanvas(windowWidth, windowHeight);
            
            // Initialize sliders
            qualitySlider = select('#quality');
            contrastSlider = select('#contrast');
            sharpnessSlider = select('#sharpness');
            physicsSlider = select('#physics');
            
            // Create astronaut
            astronaut = {
                x: width * 0.5,
                y: height * 0.5,
                vx: 0,
                vy: 0,
                rotation: 0
            };
            
            // Create background elements
            for (let i = 0; i < 100; i++) {
                stars.push({
                    x: random(width),
                    y: random(height),
                    brightness: random(50, 255),
                    size: random(1, 3)
                });
            }
            
            // Create bubbles/particles
            for (let i = 0; i < 20; i++) {
                createBubbleParticle();
            }
            
            spaceColor = color(5, 10, 30);
            underwaterColor = color(20, 60, 120);
        }
        
        function draw() {
            // Update values from sliders
            videoQuality = qualitySlider.value();
            contrast = contrastSlider.value();
            sharpness = sharpnessSlider.value();
            physics = physicsSlider.value();
            
            // Calculate effects
            let qualityFactor = map(videoQuality, 0, 100, 0.2, 1.0);
            let contrastFactor = map(contrast, 0, 200, 0.5, 2.0);
            noiseLevel = map(videoQuality, 0, 100, 0.9, 0.1);
            
            // Background
            drawBackground();
            
            // Add noise/grain effect
            addVideoNoise();
            
            // Draw stars (visibility depends on quality)
            drawStars();
            
            // Update and draw bubbles/particles
            updateBubbles();
            drawBubbles();
            
            // Draw astronaut
            drawAstronaut();
            
            // Apply post-processing effects
            applyVideoEffects();
            
            // Draw UI hints
            drawHints();
        }
        
        function drawBackground() {
            // Interpolate between space and underwater colors
            let revealFactor = map(videoQuality + contrast, 0, 300, 0, 1);
            revealFactor = constrain(revealFactor, 0, 1);
            
            let bgColor = lerpColor(spaceColor, underwaterColor, revealFactor);
            background(bgColor);
            
            // Add underwater equipment visibility
            if (revealFactor > 0.3) {
                drawUnderwaterEquipment(revealFactor);
            }
        }
        
        function drawUnderwaterEquipment(alpha) {
            push();
            stroke(150, 150, 200, alpha * 100);
            strokeWeight(2);
            noFill();
            
            // Pool walls
            rect(50, 50, width - 100, height - 100);
            
            // Equipment structures
            for (let i = 0; i < 3; i++) {
                let x = width * (0.2 + i * 0.3);
                let y = height * 0.8;
                rect(x - 30, y - 60, 60, 80);
                line(x, y - 60, x, y - 100);
            }
            
            // Pool markings
            stroke(100, 150, 200, alpha * 80);
            for (let i = 1; i < 4; i++) {
                line(0, height * i * 0.25, width, height * i * 0.25);
            }
            
            pop();
        }
        
        function addVideoNoise() {
            if (noiseLevel > 0.1) {
                loadPixels();
                for (let i = 0; i < pixels.length; i += 4) {
                    if (random() < noiseLevel * 0.3) {
                        let noise = random(-50, 50);
                        pixels[i] = constrain(pixels[i] + noise, 0, 255);
                        pixels[i + 1] = constrain(pixels[i + 1] + noise, 0, 255);
                        pixels[i + 2] = constrain(pixels[i + 2] + noise, 0, 255);
                    }
                }
                updatePixels();
            }
        }
        
        function drawStars() {
            let visibility = map(videoQuality + contrast, 0, 300, 1.0, 0.2);
            
            for (let star of stars) {
                push();
                fill(255, star.brightness * visibility);
                noStroke();
                ellipse(star.x, star.y, star.size, star.size);
                pop();
            }
        }
        
        function createBubbleParticle() {
            bubbles.push({
                x: random(width * 0.2, width * 0.8),
                y: height + 50,
                size: random(3, 12),
                speed: random(1, 3),
                wobble: random(0.02, 0.05),
                offset: random(TWO_PI),
                age: 0
            });
        }
        
        function updateBubbles() {
            // Physics behavior based on slider
            let isUnderwater = physics > 50;
            let physicsStrength = abs(physics - 50) / 50;
            
            for (let i = bubbles.length - 1; i >= 0; i--) {
                let bubble = bubbles[i];
                bubble.age++;
                
                if (isUnderwater) {
                    // Underwater bubble behavior
                    bubble.y -= bubble.speed * physicsStrength;
                    bubble.x += sin(bubble.age * bubble.wobble + bubble.offset) * 0.5;
                } else {
                    // Zero gravity particle behavior
                    bubble.y += sin(bubble.age * 0.02) * 0.3;
                    bubble.x += cos(bubble.age * 0.015) * 0.2;
                }
                
                // Remove bubbles that go off screen
                if (bubble.y < -50 || bubble.age > 1000) {
                    bubbles.splice(i, 1);
                    createBubbleParticle();
                }
            }
        }
        
        function drawBubbles() {
            let visibility = map(videoQuality, 0, 100, 0.3, 1.0);
            
            for (let bubble of bubbles) {
                push();
                
                // Bubble appearance changes with physics setting
                if (physics > 50) {
                    // Water bubbles
                    fill(150, 200, 255, 120 * visibility);
                    stroke(200, 230, 255, 100 * visibility);
                } else {
                    // Space particles
                    fill(255, 255, 200, 80 * visibility);
                    stroke(255, 255, 150, 60 * visibility);
                }
                
                strokeWeight(1);
                ellipse(bubble.x, bubble.y, bubble.size, bubble.size);
                
                // Add highlight for realism
                fill(255, 255, 255, 40 * visibility);
                noStroke();
                ellipse(bubble.x - bubble.size * 0.2, bubble.y - bubble.size * 0.2, bubble.size * 0.3);
                
                pop();
            }
        }
        
        function drawAstronaut() {
            push();
            translate(astronaut.x, astronaut.y);
            
            let visibility = map(videoQuality, 0, 100, 0.4, 1.0);
            let contrastFactor = map(contrast, 0, 200, 0.7, 1.5);
            
            // Astronaut body
            fill(220 * visibility * contrastFactor);
            stroke(180 * visibility * contrastFactor);
            strokeWeight(2);
            ellipse(0, 0, 80, 100);
            
            // Helmet
            fill(200, 220, 255, 150 * visibility);
            stroke(180 * visibility * contrastFactor);
            ellipse(0, -30, 60, 60);
            
            // Arms
            stroke(200 * visibility * contrastFactor);
            strokeWeight(15);
            line(-25, -10, -45, 10);
            line(25, -10, 45, 10);
            
            // Legs
            line(-15, 40, -25, 80);
            line(15, 40, 25, 80);
            
            // Equipment details (visible at higher quality)
            if (videoQuality > 50) {
                stroke(100, 150, 200, visibility * 100);
                strokeWeight(1);
                // Control panel
                rect(-15, -5, 30, 20);
                // Hoses
                bezier(-30, 0, -40, -20, -50, -10, -60, -30);
                bezier(30, 0, 40, -20, 50, -10, 60, -30);
            }
            
            pop();
        }
        
        function applyVideoEffects() {
            // Scanlines effect for low quality
            if (videoQuality < 50) {
                push();
                stroke(0, 0, 0, (50 - videoQuality) * 2);
                strokeWeight(1);
                for (let y = 0; y < height; y += 4) {
                    line(0, y, width, y);
                }
                pop();
            }
        }
        
        function drawHints() {
            let alpha = map(sin(frameCount * 0.05), -1, 1, 100, 200);
            
            push();
            textAlign(CENTER);
            fill(255, 255, 0, alpha);
            textSize(14);
            
            if (videoQuality < 30) {
                text("Enhance the video quality to see more details...", width/2, height - 50);
            } else if (contrast < 100) {
                text("Adjust contrast to reveal the environment...", width/2, height - 50);
            } else if (abs(physics - 50) < 20) {
                text("Change bubble physics to see the difference!", width/2, height - 50);
            }
            
            pop();
        }
        
        function setMode(newMode) {
            mode = newMode;
            
            // Update button states
            let buttons = selectAll('.mode-button');
            for (let button of buttons) {
                button.removeClass('active');
            }
            
            if (mode === 'conspiracy') {
                buttons[0].addClass('active');
                // Reset to conspiracy view
                qualitySlider.value(20);
                contrastSlider.value(50);
                physicsSlider.value(30);
            } else {
                buttons[1].addClass('active');
                // Reveal reality
                qualitySlider.value(90);
                contrastSlider.value(150);
                physicsSlider.value(80);
            }
        }
        
        function windowResized() {
            resizeCanvas(windowWidth, windowHeight);
            
            // Reposition stars
            for (let star of stars) {
                if (star.x > width) star.x = random(width);
                if (star.y > height) star.y = random(height);
            }
        }
    </script>
</body>
</html>
